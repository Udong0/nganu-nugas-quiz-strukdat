#include <iostream>
using namespace std;

typedef struct MyNode {
    int data;
    struct MyNode *left;
    struct MyNode *right;
} Node;

Node *node;

void init() {
    node = nullptr;
}

void clear(Node **node) {
    *node = nullptr;
}

int isEmpty(Node *node) {
    return node == nullptr;
}

void insert(Node **root, int newData) {
    if (*root == nullptr) {
        Node *newNode = new Node;
        newNode->data = newData;
        newNode->left = nullptr;
        newNode->right = nullptr;
        *root = newNode;
        printf("%d has been inserted by insert()\n", newData);
    } else if (newData < (*root)->data) {
        insert(&(*root)->left, newData);
    } else if (newData > (*root)->data) {
        insert(&(*root)->right, newData);
    } else {
        printf("%d has existed in the tree\n", newData);
    }
}

void preOrder(Node *root) {
    if (root != nullptr) {
        printf("%d ", root->data);
        preOrder(root->left);
        preOrder(root->right);
    }
}

void inOrder(Node *root) {
    if (root != nullptr) {
        inOrder(root->left);
        printf("%d ", root->data);
        inOrder(root->right);
    }
}

void postOrder(Node *root) {
    if (root != nullptr) {
        postOrder(root->left);
        postOrder(root->right);
        printf("%d ", root->data);
    }
}

typedef struct myQNode {
    Node *node;
    myQNode *next;
} QNode;

typedef struct myQueue {
    QNode *front;
    QNode *rear;
} Queue;

Queue *createQ() {
    Queue *queue = new Queue;
    queue->front = nullptr;
    queue->rear = nullptr;
    return queue;
}

int isEmptyQ(Queue *queue) {
    return queue->front == nullptr;
}

void enQueue(Queue *queue, Node *newNode) {
    QNode *qNode = new QNode;
    qNode->node = newNode;
    qNode->next = nullptr;
    if (isEmptyQ(queue)) {
        queue->front = qNode;
        queue->rear = qNode;
    } else {
        queue->rear->next = qNode;
        queue->rear = qNode;
    }
}

Node *deQueue(Queue *queue) {
    if (isEmptyQ(queue)) {
        printf("Queue is empty.\n");
        return nullptr;
    }
    QNode *temp = queue->front;
    Node *node = temp->node;
    queue->front = queue->front->next;
    delete temp;
    return node;
}

Node *getFront(Queue *queue) {
    if (queue->front == nullptr) {
        printf("Queue is empty.\n");
        return nullptr;
    }
    return queue->front->node;
}

void levelOrder(Node *root) {
    if (root == nullptr) {
        printf("Tree is empty.\n");
        return;
    }
    Queue *queue = createQ();
    enQueue(queue, root);
    while (!isEmptyQ(queue)) {
        Node *n = getFront(queue);
        printf("%d ", n->data);
        if (n->left != nullptr) {
            enQueue(queue, n->left);
        }
        if (n->right != nullptr) {
            enQueue(queue, n->right);
        }
        deQueue(queue);
    }
}

Node *search(Node *root, int data) {
    if (root == nullptr) {
        printf("%d cannot be found by search()\n", data);
        return nullptr;
    } else if (data < root->data) {
        return search(root->left, data);
    } else if (data > root->data) {
        return search(root->right, data);
    } else {
        printf("%d has been found by search()\n", data);
        return root;
    }
}

int count(Node *root) {
    if (root == nullptr) {
        return 0;
    } else {
        return count(root->left) + count(root->right) + 1;
    }
}

int height(Node *root) {
    if (root == nullptr) {
        return -1;
    }
    int u = height(root->left);
    int v = height(root->right);
    return (u > v) ? u + 1 : v + 1;
}

bool isBalancedHelper(Node *root, int &height) {
    if (root == nullptr) {
        height = -1;
        return true; 
    }

    int leftHeight, rightHeight;
    bool leftBalanced = isBalancedHelper(root->left, leftHeight);
    bool rightBalanced = isBalancedHelper(root->right, rightHeight);

    height = std::max(leftHeight, rightHeight) + 1;

    if (!leftBalanced || !rightBalanced) {
        return false; 
    }

    if (std::abs(leftHeight - rightHeight) > 1) {
        return false; 
    }

    return true;
}
bool isBalanced(Node *root) {
    int height;
    return isBalancedHelper(root, height);
}

Node *min(Node *root) {
    if (root == nullptr) {
        return nullptr;
    } else if (root->left == nullptr) {
        return root;
    } else {
        return min(root->left);
    }
}

Node *max(Node *root) {
    if (root == nullptr) {
        return nullptr;
    } else if (root->right == nullptr) {
        return root;
    } else {
        return max(root->right);
    }
}

void leaf(Node *root) {
    if (root == nullptr) {
        printf("Tree is empty.\n");
    }
    if (root->left != nullptr) {
        leaf(root->left);
    }
    if (root->right != nullptr) {
        leaf(root->right);
    }
    if (root->left == nullptr && root->right == nullptr) {
        printf("%d ", root->data);
    }
}

void printDepthFirst(Node *root) {
    if (root == nullptr) {
        return;
    }
    cout << root->data << " ";
    printDepthFirst(root->left);
    printDepthFirst(root->right);
}

void printKthLevel(Node *root, int k) {
    if (root == nullptr || k < 0) {
        return;
    }
    if (k == 0) {
        cout << root->data << " ";
        return;
    }
    printKthLevel(root->left, k-1);
    printKthLevel(root->right, k-1);
}

int sumOfNodes(Node *root) {
    if (root == nullptr) {
        return 0;
    }
    int leftSum = sumOfNodes(root->left);
    int rightSum = sumOfNodes(root->right);
    return root->data + leftSum + rightSum;
}

void triple(Node *root) {
    if (root == nullptr) {
        return;
    }
    root->data *= 3;
    triple(root->left);
    triple(root->right);
}

void inorderTraversal(Node *root) {
    if (root == nullptr) {
        return;
    }
    inorderTraversal(root->left);
    cout << root->data << " ";
    inorderTraversal(root->right);
}

void mirror(Node *root) {
    if (root == nullptr) {
        return;
    }
    mirror(root->left);
    mirror(root->right);
    Node *temp = root->left;
    root->left = root->right;
    root->right = temp;
}

Node *findParent(Node *root, int childData) {
    if (root == nullptr || root->data == childData) {
        return nullptr;
    }

    if ((root->left != nullptr && root->left->data == childData) ||
        (root->right != nullptr && root->right->data == childData)) {
        return root;
    }

    Node *leftResult = findParent(root->left, childData);
    if (leftResult != nullptr) {
        return leftResult;
    }

    return findParent(root->right, childData);
}

Node *minValueNode(Node *node) {
    Node *current = node;
    while (current && current->left != nullptr) {
        current = current->left;
    }
    return current;
}

Node *delNode(Node *root, int delData) {
    if (root == nullptr) {
        return root;
    }
    
    if (delData < root->data) {
        root->left = delNode(root->left, delData);
    } 
    else if (delData > root->data) {
        root->right = delNode(root->right, delData);
    } 
    else {
        if (root->left == nullptr) {
            Node *temp = root->right;
            delete root;
            return temp;
        } else if (root->right == nullptr) {
            Node *temp = root->left;
            delete root;
            return temp;
        }

        Node *temp = minValueNode(root->right);
        root->data = temp->data;
        root->right = delNode(root->right, temp->data);
    }
    return root;
}

Node *findChild(Node *root, int parentData) {
    if (root == nullptr || root->data == parentData) {
        return nullptr;
    }
    if (root->left != nullptr && root->left->data == parentData) {
        return root->left;
    }
    if (root->right != nullptr && root->right->data == parentData) {
        return root->right;
    }

    Node *leftChild = findChild(root->left, parentData);
    if (leftChild != nullptr) {
        return leftChild;
    }
    Node *rightChild = findChild(root->right, parentData);
    if (rightChild != nullptr) {
        return rightChild;
    }
    return nullptr;
}

void convertToDLLHelper(Node *root, Node **head, Node **prev) {
    if (root == nullptr) {
        return;
    }

    convertToDLLHelper(root->left, head, prev);

    if (*prev == nullptr) {
        *head = root;
    } else {
        root->left = *prev;
        (*prev)->right = root;
    }
    *prev = root;

    convertToDLLHelper(root->right, head, prev);
}

Node *convertToDLL(Node *root) {
    Node *head = nullptr;
    Node *prev = nullptr;
    convertToDLLHelper(root, &head, &prev);
    return head;
}

void preOrderDLL(Node *head) {
    Node *current = head;
    while (current != nullptr) {
        printf("%d ", current->data);
        current = current->right;
    }
}


int main() {
    Node *root;
    root = nullptr;

    printf("\n\nClear the tree ...\n");
    clear(&root);
    printf("Build a tree ...\n");
    insert(&root, 6);
    insert(&root, 3);
    insert(&root, 10);
    insert(&root, 1);
    insert(&root, 5);
    insert(&root, 7);
    insert(&root, 8);
    insert(&root, 9);

		// 1. Print depth-first traversal
		printDepthFirst(root);
		
		// 2. Print nodes at level k
		int k = 2;
		cout << endl << "Nodes at level " << k << ": ";
		printKthLevel(root, k);
		
		// 3. Calculate and print the sum of all nodes
		int sum = sumOfNodes(root);
		cout << endl << "Sum of all nodes: " << sum << endl;
		
		// 4. Triple all nodes
		triple(root);
		cout << "Tree after tripling nodes (in-order traversal): ";
		inorderTraversal(root);
		cout << endl;
		
		// 5. Create mirror image
		mirror(root);
		cout << "Mirror image tree (in-order traversal): ";
		inorderTraversal(root);
		cout << endl;

		// 6. Check if the tree is balanced
		bool balanced = isBalanced(root);
		cout << "The tree is " << (balanced ? "balanced" : "not balanced") << endl;

		// 7. Delete a node
		int delData = 7;
		root = delNode(root, delData);
		cout << "Tree after deleting " << delData << " (in-order traversal): ";
		inorderTraversal(root);
		cout << endl;

		// 8. Find the parent of a given child node
		int childData = 30;
		Node *parent = findParent(root, childData);
		if (parent != nullptr) {
			cout << "Parent of node with data " << childData << " is: " << parent->data << endl;
		} else {
			cout << "Parent of node with data " << childData << " is not found." << endl;
		}

		// 9. Find the children node of a given parent data.
		int parentData = 3;
		Node *child = findChild(root, parentData);
		if (child != nullptr) {
   		cout << "Child of node with data " << parentData << " is: " << child->data << endl;
		} else {
  		cout << "Child of node with data " << parentData << " is not found." << endl;
		}

		// 10. Convert binary tree to doubly linked list
    	Node *headDLL = convertToDLL(root);
    	cout << "Doubly Linked List (pre-order traversal): ";
    	preOrderDLL(headDLL);
    	cout << endl;

    return 0;
}
